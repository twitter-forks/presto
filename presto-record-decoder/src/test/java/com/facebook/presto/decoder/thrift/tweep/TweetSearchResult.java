/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.presto.decoder.thrift.tweep;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class TweetSearchResult implements org.apache.thrift.TBase<TweetSearchResult, TweetSearchResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TweetSearchResult");

  private static final org.apache.thrift.protocol.TField TWEET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TWEET_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetSet", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetSearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetSearchResultTupleSchemeFactory());
  }

  public List<Tweet> tweetList; // required
  public Set<Tweet> tweetSet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TWEET_LIST((short)1, "tweetList"),
    TWEET_SET((short)2, "tweetSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TWEET_LIST
          return TWEET_LIST;
        case 2: // TWEET_SET
          return TWEET_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TWEET_LIST, new org.apache.thrift.meta_data.FieldMetaData("tweetList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "TweetList")));
    tmpMap.put(_Fields.TWEET_SET, new org.apache.thrift.meta_data.FieldMetaData("tweetSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.SET        , "TweetSet")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TweetSearchResult.class, metaDataMap);
  }

  public TweetSearchResult() {
  }

  public TweetSearchResult(
    List<Tweet> tweetList,
    Set<Tweet> tweetSet)
  {
    this();
    this.tweetList = tweetList;
    this.tweetSet = tweetSet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TweetSearchResult(TweetSearchResult other) {
    if (other.isSetTweetList()) {
      this.tweetList = other.tweetList;
    }
    if (other.isSetTweetSet()) {
      this.tweetSet = other.tweetSet;
    }
  }

  public TweetSearchResult deepCopy() {
    return new TweetSearchResult(this);
  }

  @Override
  public void clear() {
    this.tweetList = null;
    this.tweetSet = null;
  }

  public int getTweetListSize() {
    return (this.tweetList == null) ? 0 : this.tweetList.size();
  }

  public java.util.Iterator<Tweet> getTweetListIterator() {
    return (this.tweetList == null) ? null : this.tweetList.iterator();
  }

  public void addToTweetList(Tweet elem) {
    if (this.tweetList == null) {
      this.tweetList = new ArrayList<Tweet>();
    }
    this.tweetList.add(elem);
  }

  public List<Tweet> getTweetList() {
    return this.tweetList;
  }

  public TweetSearchResult setTweetList(List<Tweet> tweetList) {
    this.tweetList = tweetList;
    return this;
  }

  public void unsetTweetList() {
    this.tweetList = null;
  }

  /** Returns true if field tweetList is set (has been assigned a value) and false otherwise */
  public boolean isSetTweetList() {
    return this.tweetList != null;
  }

  public void setTweetListIsSet(boolean value) {
    if (!value) {
      this.tweetList = null;
    }
  }

  public int getTweetSetSize() {
    return (this.tweetSet == null) ? 0 : this.tweetSet.size();
  }

  public java.util.Iterator<Tweet> getTweetSetIterator() {
    return (this.tweetSet == null) ? null : this.tweetSet.iterator();
  }

  public void addToTweetSet(Tweet elem) {
    if (this.tweetSet == null) {
      this.tweetSet = new HashSet<Tweet>();
    }
    this.tweetSet.add(elem);
  }

  public Set<Tweet> getTweetSet() {
    return this.tweetSet;
  }

  public TweetSearchResult setTweetSet(Set<Tweet> tweetSet) {
    this.tweetSet = tweetSet;
    return this;
  }

  public void unsetTweetSet() {
    this.tweetSet = null;
  }

  /** Returns true if field tweetSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTweetSet() {
    return this.tweetSet != null;
  }

  public void setTweetSetIsSet(boolean value) {
    if (!value) {
      this.tweetSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TWEET_LIST:
      if (value == null) {
        unsetTweetList();
      } else {
        setTweetList((List<Tweet>)value);
      }
      break;

    case TWEET_SET:
      if (value == null) {
        unsetTweetSet();
      } else {
        setTweetSet((Set<Tweet>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TWEET_LIST:
      return getTweetList();

    case TWEET_SET:
      return getTweetSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TWEET_LIST:
      return isSetTweetList();
    case TWEET_SET:
      return isSetTweetSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TweetSearchResult)
      return this.equals((TweetSearchResult)that);
    return false;
  }

  public boolean equals(TweetSearchResult that) {
    if (that == null)
      return false;

    boolean this_present_tweetList = true && this.isSetTweetList();
    boolean that_present_tweetList = true && that.isSetTweetList();
    if (this_present_tweetList || that_present_tweetList) {
      if (!(this_present_tweetList && that_present_tweetList))
        return false;
      if (!this.tweetList.equals(that.tweetList))
        return false;
    }

    boolean this_present_tweetSet = true && this.isSetTweetSet();
    boolean that_present_tweetSet = true && that.isSetTweetSet();
    if (this_present_tweetSet || that_present_tweetSet) {
      if (!(this_present_tweetSet && that_present_tweetSet))
        return false;
      if (!this.tweetSet.equals(that.tweetSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TweetSearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TweetSearchResult typedOther = (TweetSearchResult)other;

    lastComparison = Boolean.valueOf(isSetTweetList()).compareTo(typedOther.isSetTweetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTweetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetList, typedOther.tweetList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTweetSet()).compareTo(typedOther.isSetTweetSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTweetSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetSet, typedOther.tweetSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TweetSearchResult(");
    boolean first = true;

    sb.append("tweetList:");
    if (this.tweetList == null) {
      sb.append("null");
    } else {
      sb.append(this.tweetList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tweetSet:");
    if (this.tweetSet == null) {
      sb.append("null");
    } else {
      sb.append(this.tweetSet);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetSearchResultStandardSchemeFactory implements SchemeFactory {
    public TweetSearchResultStandardScheme getScheme() {
      return new TweetSearchResultStandardScheme();
    }
  }

  private static class TweetSearchResultStandardScheme extends StandardScheme<TweetSearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TweetSearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TWEET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                struct.tweetList = new ArrayList<Tweet>(_list10.size);
                for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                {
                  Tweet _elem12; // required
                  _elem12 = new Tweet();
                  _elem12.read(iprot);
                  struct.tweetList.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setTweetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TWEET_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set13 = iprot.readSetBegin();
                struct.tweetSet = new HashSet<Tweet>(2*_set13.size);
                for (int _i14 = 0; _i14 < _set13.size; ++_i14)
                {
                  Tweet _elem15; // required
                  _elem15 = new Tweet();
                  _elem15.read(iprot);
                  struct.tweetSet.add(_elem15);
                }
                iprot.readSetEnd();
              }
              struct.setTweetSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TweetSearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tweetList != null) {
        oprot.writeFieldBegin(TWEET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tweetList.size()));
          for (Tweet _iter16 : struct.tweetList)
          {
            _iter16.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tweetSet != null) {
        oprot.writeFieldBegin(TWEET_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.tweetSet.size()));
          for (Tweet _iter17 : struct.tweetSet)
          {
            _iter17.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetSearchResultTupleSchemeFactory implements SchemeFactory {
    public TweetSearchResultTupleScheme getScheme() {
      return new TweetSearchResultTupleScheme();
    }
  }

  private static class TweetSearchResultTupleScheme extends TupleScheme<TweetSearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TweetSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTweetList()) {
        optionals.set(0);
      }
      if (struct.isSetTweetSet()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTweetList()) {
        {
          oprot.writeI32(struct.tweetList.size());
          for (Tweet _iter18 : struct.tweetList)
          {
            _iter18.write(oprot);
          }
        }
      }
      if (struct.isSetTweetSet()) {
        {
          oprot.writeI32(struct.tweetSet.size());
          for (Tweet _iter19 : struct.tweetSet)
          {
            _iter19.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TweetSearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tweetList = new ArrayList<Tweet>(_list20.size);
          for (int _i21 = 0; _i21 < _list20.size; ++_i21)
          {
            Tweet _elem22; // required
            _elem22 = new Tweet();
            _elem22.read(iprot);
            struct.tweetList.add(_elem22);
          }
        }
        struct.setTweetListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set23 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tweetSet = new HashSet<Tweet>(2*_set23.size);
          for (int _i24 = 0; _i24 < _set23.size; ++_i24)
          {
            Tweet _elem25; // required
            _elem25 = new Tweet();
            _elem25.read(iprot);
            struct.tweetSet.add(_elem25);
          }
        }
        struct.setTweetSetIsSet(true);
      }
    }
  }

}

