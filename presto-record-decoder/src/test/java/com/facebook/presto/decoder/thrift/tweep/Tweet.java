/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.presto.decoder.thrift.tweep;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;

public class Tweet implements org.apache.thrift.TBase<Tweet, Tweet._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Tweet");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("loc", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TWEET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tweetType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("isDeleted", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField FULL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fullId", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField PIC_FIELD_DESC = new org.apache.thrift.protocol.TField("pic", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("attr", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetTupleSchemeFactory());
  }

  public int userId; // required
  public String userName; // required
  public String text; // required
  public Location loc; // optional
  /**
   * 
   * @see TweetType
   */
  public TweetType tweetType; // optional
  public boolean isDeleted; // optional
  public byte b; // optional
  public short age; // optional
  public long fullId; // optional
  public ByteBuffer pic; // optional
  public Map<String,String> attr; // optional
  public String language; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    TEXT((short)3, "text"),
    LOC((short)4, "loc"),
    /**
     * 
     * @see TweetType
     */
    TWEET_TYPE((short)5, "tweetType"),
    IS_DELETED((short)6, "isDeleted"),
    B((short)7, "b"),
    AGE((short)8, "age"),
    FULL_ID((short)9, "fullId"),
    PIC((short)10, "pic"),
    ATTR((short)11, "attr"),
    LANGUAGE((short)16, "language");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // TEXT
          return TEXT;
        case 4: // LOC
          return LOC;
        case 5: // TWEET_TYPE
          return TWEET_TYPE;
        case 6: // IS_DELETED
          return IS_DELETED;
        case 7: // B
          return B;
        case 8: // AGE
          return AGE;
        case 9: // FULL_ID
          return FULL_ID;
        case 10: // PIC
          return PIC;
        case 11: // ATTR
          return ATTR;
        case 16: // LANGUAGE
          return LANGUAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __ISDELETED_ISSET_ID = 1;
  private static final int __B_ISSET_ID = 2;
  private static final int __AGE_ISSET_ID = 3;
  private static final int __FULLID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LOC,_Fields.TWEET_TYPE,_Fields.IS_DELETED,_Fields.B,_Fields.AGE,_Fields.FULL_ID,_Fields.PIC,_Fields.ATTR,_Fields.LANGUAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOC, new org.apache.thrift.meta_data.FieldMetaData("loc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.TWEET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tweetType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TweetType.class)));
    tmpMap.put(_Fields.IS_DELETED, new org.apache.thrift.meta_data.FieldMetaData("isDeleted", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FULL_ID, new org.apache.thrift.meta_data.FieldMetaData("fullId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PIC, new org.apache.thrift.meta_data.FieldMetaData("pic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ATTR, new org.apache.thrift.meta_data.FieldMetaData("attr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Tweet.class, metaDataMap);
  }

  public Tweet() {
    this.tweetType = TweetType.TWEET;

    this.isDeleted = false;

    this.language = "english";

  }

  public Tweet(
    int userId,
    String userName,
    String text)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.text = text;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Tweet(Tweet other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetLoc()) {
      this.loc = new Location(other.loc);
    }
    if (other.isSetTweetType()) {
      this.tweetType = other.tweetType;
    }
    this.isDeleted = other.isDeleted;
    this.b = other.b;
    this.age = other.age;
    this.fullId = other.fullId;
    if (other.isSetPic()) {
      this.pic = org.apache.thrift.TBaseHelper.copyBinary(other.pic);
;
    }
    if (other.isSetAttr()) {
      Map<String,String> __this__attr = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.attr.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__attr_copy_key = other_element_key;

        String __this__attr_copy_value = other_element_value;

        __this__attr.put(__this__attr_copy_key, __this__attr_copy_value);
      }
      this.attr = __this__attr;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
  }

  public Tweet deepCopy() {
    return new Tweet(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.text = null;
    this.loc = null;
    this.tweetType = TweetType.TWEET;

    this.isDeleted = false;

    setBIsSet(false);
    this.b = 0;
    setAgeIsSet(false);
    this.age = 0;
    setFullIdIsSet(false);
    this.fullId = 0;
    this.pic = null;
    this.attr = null;
    this.language = "english";

  }

  public int getUserId() {
    return this.userId;
  }

  public Tweet setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public Tweet setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getText() {
    return this.text;
  }

  public Tweet setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public Location getLoc() {
    return this.loc;
  }

  public Tweet setLoc(Location loc) {
    this.loc = loc;
    return this;
  }

  public void unsetLoc() {
    this.loc = null;
  }

  /** Returns true if field loc is set (has been assigned a value) and false otherwise */
  public boolean isSetLoc() {
    return this.loc != null;
  }

  public void setLocIsSet(boolean value) {
    if (!value) {
      this.loc = null;
    }
  }

  /**
   * 
   * @see TweetType
   */
  public TweetType getTweetType() {
    return this.tweetType;
  }

  /**
   * 
   * @see TweetType
   */
  public Tweet setTweetType(TweetType tweetType) {
    this.tweetType = tweetType;
    return this;
  }

  public void unsetTweetType() {
    this.tweetType = null;
  }

  /** Returns true if field tweetType is set (has been assigned a value) and false otherwise */
  public boolean isSetTweetType() {
    return this.tweetType != null;
  }

  public void setTweetTypeIsSet(boolean value) {
    if (!value) {
      this.tweetType = null;
    }
  }

  public boolean isIsDeleted() {
    return this.isDeleted;
  }

  public Tweet setIsDeleted(boolean isDeleted) {
    this.isDeleted = isDeleted;
    setIsDeletedIsSet(true);
    return this;
  }

  public void unsetIsDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDELETED_ISSET_ID);
  }

  /** Returns true if field isDeleted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDELETED_ISSET_ID);
  }

  public void setIsDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDELETED_ISSET_ID, value);
  }

  public byte getB() {
    return this.b;
  }

  public Tweet setB(byte b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public short getAge() {
    return this.age;
  }

  public Tweet setAge(short age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public long getFullId() {
    return this.fullId;
  }

  public Tweet setFullId(long fullId) {
    this.fullId = fullId;
    setFullIdIsSet(true);
    return this;
  }

  public void unsetFullId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FULLID_ISSET_ID);
  }

  /** Returns true if field fullId is set (has been assigned a value) and false otherwise */
  public boolean isSetFullId() {
    return EncodingUtils.testBit(__isset_bitfield, __FULLID_ISSET_ID);
  }

  public void setFullIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FULLID_ISSET_ID, value);
  }

  public byte[] getPic() {
    setPic(org.apache.thrift.TBaseHelper.rightSize(pic));
    return pic == null ? null : pic.array();
  }

  public ByteBuffer bufferForPic() {
    return pic;
  }

  public Tweet setPic(byte[] pic) {
    setPic(pic == null ? (ByteBuffer)null : ByteBuffer.wrap(pic));
    return this;
  }

  public Tweet setPic(ByteBuffer pic) {
    this.pic = pic;
    return this;
  }

  public void unsetPic() {
    this.pic = null;
  }

  /** Returns true if field pic is set (has been assigned a value) and false otherwise */
  public boolean isSetPic() {
    return this.pic != null;
  }

  public void setPicIsSet(boolean value) {
    if (!value) {
      this.pic = null;
    }
  }

  public int getAttrSize() {
    return (this.attr == null) ? 0 : this.attr.size();
  }

  public void putToAttr(String key, String val) {
    if (this.attr == null) {
      this.attr = new HashMap<String,String>();
    }
    this.attr.put(key, val);
  }

  public Map<String,String> getAttr() {
    return this.attr;
  }

  public Tweet setAttr(Map<String,String> attr) {
    this.attr = attr;
    return this;
  }

  public void unsetAttr() {
    this.attr = null;
  }

  /** Returns true if field attr is set (has been assigned a value) and false otherwise */
  public boolean isSetAttr() {
    return this.attr != null;
  }

  public void setAttrIsSet(boolean value) {
    if (!value) {
      this.attr = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public Tweet setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case LOC:
      if (value == null) {
        unsetLoc();
      } else {
        setLoc((Location)value);
      }
      break;

    case TWEET_TYPE:
      if (value == null) {
        unsetTweetType();
      } else {
        setTweetType((TweetType)value);
      }
      break;

    case IS_DELETED:
      if (value == null) {
        unsetIsDeleted();
      } else {
        setIsDeleted((Boolean)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((Byte)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Short)value);
      }
      break;

    case FULL_ID:
      if (value == null) {
        unsetFullId();
      } else {
        setFullId((Long)value);
      }
      break;

    case PIC:
      if (value == null) {
        unsetPic();
      } else {
        setPic((ByteBuffer)value);
      }
      break;

    case ATTR:
      if (value == null) {
        unsetAttr();
      } else {
        setAttr((Map<String,String>)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Integer.valueOf(getUserId());

    case USER_NAME:
      return getUserName();

    case TEXT:
      return getText();

    case LOC:
      return getLoc();

    case TWEET_TYPE:
      return getTweetType();

    case IS_DELETED:
      return Boolean.valueOf(isIsDeleted());

    case B:
      return Byte.valueOf(getB());

    case AGE:
      return Short.valueOf(getAge());

    case FULL_ID:
      return Long.valueOf(getFullId());

    case PIC:
      return getPic();

    case ATTR:
      return getAttr();

    case LANGUAGE:
      return getLanguage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case TEXT:
      return isSetText();
    case LOC:
      return isSetLoc();
    case TWEET_TYPE:
      return isSetTweetType();
    case IS_DELETED:
      return isSetIsDeleted();
    case B:
      return isSetB();
    case AGE:
      return isSetAge();
    case FULL_ID:
      return isSetFullId();
    case PIC:
      return isSetPic();
    case ATTR:
      return isSetAttr();
    case LANGUAGE:
      return isSetLanguage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Tweet)
      return this.equals((Tweet)that);
    return false;
  }

  public boolean equals(Tweet that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_loc = true && this.isSetLoc();
    boolean that_present_loc = true && that.isSetLoc();
    if (this_present_loc || that_present_loc) {
      if (!(this_present_loc && that_present_loc))
        return false;
      if (!this.loc.equals(that.loc))
        return false;
    }

    boolean this_present_tweetType = true && this.isSetTweetType();
    boolean that_present_tweetType = true && that.isSetTweetType();
    if (this_present_tweetType || that_present_tweetType) {
      if (!(this_present_tweetType && that_present_tweetType))
        return false;
      if (!this.tweetType.equals(that.tweetType))
        return false;
    }

    boolean this_present_isDeleted = true && this.isSetIsDeleted();
    boolean that_present_isDeleted = true && that.isSetIsDeleted();
    if (this_present_isDeleted || that_present_isDeleted) {
      if (!(this_present_isDeleted && that_present_isDeleted))
        return false;
      if (this.isDeleted != that.isDeleted)
        return false;
    }

    boolean this_present_b = true && this.isSetB();
    boolean that_present_b = true && that.isSetB();
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_fullId = true && this.isSetFullId();
    boolean that_present_fullId = true && that.isSetFullId();
    if (this_present_fullId || that_present_fullId) {
      if (!(this_present_fullId && that_present_fullId))
        return false;
      if (this.fullId != that.fullId)
        return false;
    }

    boolean this_present_pic = true && this.isSetPic();
    boolean that_present_pic = true && that.isSetPic();
    if (this_present_pic || that_present_pic) {
      if (!(this_present_pic && that_present_pic))
        return false;
      if (!this.pic.equals(that.pic))
        return false;
    }

    boolean this_present_attr = true && this.isSetAttr();
    boolean that_present_attr = true && that.isSetAttr();
    if (this_present_attr || that_present_attr) {
      if (!(this_present_attr && that_present_attr))
        return false;
      if (!this.attr.equals(that.attr))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Tweet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Tweet typedOther = (Tweet)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoc()).compareTo(typedOther.isSetLoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loc, typedOther.loc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTweetType()).compareTo(typedOther.isSetTweetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTweetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tweetType, typedOther.tweetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDeleted()).compareTo(typedOther.isSetIsDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDeleted, typedOther.isDeleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB()).compareTo(typedOther.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, typedOther.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(typedOther.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, typedOther.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullId()).compareTo(typedOther.isSetFullId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullId, typedOther.fullId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPic()).compareTo(typedOther.isSetPic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pic, typedOther.pic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttr()).compareTo(typedOther.isSetAttr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attr, typedOther.attr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Tweet(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (isSetLoc()) {
      if (!first) sb.append(", ");
      sb.append("loc:");
      if (this.loc == null) {
        sb.append("null");
      } else {
        sb.append(this.loc);
      }
      first = false;
    }
    if (isSetTweetType()) {
      if (!first) sb.append(", ");
      sb.append("tweetType:");
      if (this.tweetType == null) {
        sb.append("null");
      } else {
        sb.append(this.tweetType);
      }
      first = false;
    }
    if (isSetIsDeleted()) {
      if (!first) sb.append(", ");
      sb.append("isDeleted:");
      sb.append(this.isDeleted);
      first = false;
    }
    if (isSetB()) {
      if (!first) sb.append(", ");
      sb.append("b:");
      sb.append(this.b);
      first = false;
    }
    if (isSetAge()) {
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
    }
    if (isSetFullId()) {
      if (!first) sb.append(", ");
      sb.append("fullId:");
      sb.append(this.fullId);
      first = false;
    }
    if (isSetPic()) {
      if (!first) sb.append(", ");
      sb.append("pic:");
      if (this.pic == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.pic, sb);
      }
      first = false;
    }
    if (isSetAttr()) {
      if (!first) sb.append(", ");
      sb.append("attr:");
      if (this.attr == null) {
        sb.append("null");
      } else {
        sb.append(this.attr);
      }
      first = false;
    }
    if (isSetLanguage()) {
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    if (userName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
    }
    if (text == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'text' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (loc != null) {
      loc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetStandardSchemeFactory implements SchemeFactory {
    public TweetStandardScheme getScheme() {
      return new TweetStandardScheme();
    }
  }

  private static class TweetStandardScheme extends StandardScheme<Tweet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Tweet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text = iprot.readString();
              struct.setTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loc = new Location();
              struct.loc.read(iprot);
              struct.setLocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TWEET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tweetType = TweetType.findByValue(iprot.readI32());
              struct.setTweetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDeleted = iprot.readBool();
              struct.setIsDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.b = iprot.readByte();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.age = iprot.readI16();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FULL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fullId = iprot.readI64();
              struct.setFullIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pic = iprot.readBinary();
              struct.setPicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ATTR
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.attr = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.attr.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setAttrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Tweet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.text != null) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(struct.text);
        oprot.writeFieldEnd();
      }
      if (struct.loc != null) {
        if (struct.isSetLoc()) {
          oprot.writeFieldBegin(LOC_FIELD_DESC);
          struct.loc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tweetType != null) {
        if (struct.isSetTweetType()) {
          oprot.writeFieldBegin(TWEET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.tweetType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsDeleted()) {
        oprot.writeFieldBegin(IS_DELETED_FIELD_DESC);
        oprot.writeBool(struct.isDeleted);
        oprot.writeFieldEnd();
      }
      if (struct.isSetB()) {
        oprot.writeFieldBegin(B_FIELD_DESC);
        oprot.writeByte(struct.b);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAge()) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI16(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFullId()) {
        oprot.writeFieldBegin(FULL_ID_FIELD_DESC);
        oprot.writeI64(struct.fullId);
        oprot.writeFieldEnd();
      }
      if (struct.pic != null) {
        if (struct.isSetPic()) {
          oprot.writeFieldBegin(PIC_FIELD_DESC);
          oprot.writeBinary(struct.pic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.attr != null) {
        if (struct.isSetAttr()) {
          oprot.writeFieldBegin(ATTR_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attr.size()));
            for (Map.Entry<String, String> _iter4 : struct.attr.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        if (struct.isSetLanguage()) {
          oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
          oprot.writeString(struct.language);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetTupleSchemeFactory implements SchemeFactory {
    public TweetTupleScheme getScheme() {
      return new TweetTupleScheme();
    }
  }

  private static class TweetTupleScheme extends TupleScheme<Tweet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeString(struct.userName);
      oprot.writeString(struct.text);
      BitSet optionals = new BitSet();
      if (struct.isSetLoc()) {
        optionals.set(0);
      }
      if (struct.isSetTweetType()) {
        optionals.set(1);
      }
      if (struct.isSetIsDeleted()) {
        optionals.set(2);
      }
      if (struct.isSetB()) {
        optionals.set(3);
      }
      if (struct.isSetAge()) {
        optionals.set(4);
      }
      if (struct.isSetFullId()) {
        optionals.set(5);
      }
      if (struct.isSetPic()) {
        optionals.set(6);
      }
      if (struct.isSetAttr()) {
        optionals.set(7);
      }
      if (struct.isSetLanguage()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetLoc()) {
        struct.loc.write(oprot);
      }
      if (struct.isSetTweetType()) {
        oprot.writeI32(struct.tweetType.getValue());
      }
      if (struct.isSetIsDeleted()) {
        oprot.writeBool(struct.isDeleted);
      }
      if (struct.isSetB()) {
        oprot.writeByte(struct.b);
      }
      if (struct.isSetAge()) {
        oprot.writeI16(struct.age);
      }
      if (struct.isSetFullId()) {
        oprot.writeI64(struct.fullId);
      }
      if (struct.isSetPic()) {
        oprot.writeBinary(struct.pic);
      }
      if (struct.isSetAttr()) {
        {
          oprot.writeI32(struct.attr.size());
          for (Map.Entry<String, String> _iter5 : struct.attr.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Tweet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.userName = iprot.readString();
      struct.setUserNameIsSet(true);
      struct.text = iprot.readString();
      struct.setTextIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.loc = new Location();
        struct.loc.read(iprot);
        struct.setLocIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tweetType = TweetType.findByValue(iprot.readI32());
        struct.setTweetTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isDeleted = iprot.readBool();
        struct.setIsDeletedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.b = iprot.readByte();
        struct.setBIsSet(true);
      }
      if (incoming.get(4)) {
        struct.age = iprot.readI16();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fullId = iprot.readI64();
        struct.setFullIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pic = iprot.readBinary();
        struct.setPicIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attr = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8; // required
            String _val9; // required
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.attr.put(_key8, _val9);
          }
        }
        struct.setAttrIsSet(true);
      }
      if (incoming.get(8)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
    }
  }

}

